/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

const documents = {
    "\n    mutation deleteComment($deleteCommentId: Int!) {\n        deleteComment(id: $deleteCommentId) {\n          ok\n          id\n          error\n        }\n      }\n    ": types.DeleteCommentDocument,
    "\nmutation createComment($photoId: Int!, $payload: String!) {\n  createComment(photoId: $photoId, payload: $payload) {\n    ok\n    error\n    id\n  }\n}\n": types.CreateCommentDocument,
    "\n                        fragment createComment on Comment {\n                            id\n                            payload\n                            isMine\n                            createAt\n                            user{\n                                userName\n                                avatar\n                            }\n                        }\n                    ": types.CreateCommentFragmentDoc,
    "\n        mutation toggleLike($id: Int!) {\n            toggleLike(id: $id) {\n              ok\n              error\n            }\n          }       \n        ": types.ToggleLikeDocument,
    "\n  fragment PhotoFragment on Photo {\n    id\n    file\n    likes\n    commentCount\n    isLiked\n  }\n": types.PhotoFragmentFragmentDoc,
    "\n  fragment CommentFragment on Comment {\n    id\n    payload\n    isMine\n    createAt\n    user {\n      userName\n      avatar\n    }\n  }\n": types.CommentFragmentFragmentDoc,
    "\n  query me {\n    me {\n      userName\n      avatar\n      totalFollowing\n      totalFollowers\n    }\n  }\n": types.MeDocument,
    "\n  query SeeFeed {\n    seeFeed {\n      ...PhotoFragment\n      user {\n        userName\n        avatar\n      }\n      caption\n      commentCount\n      createAt\n      isMine\n      comments {\n        ...CommentFragment\n      }\n    }\n  }\n  \n  \n": types.SeeFeedDocument,
    "\n    mutation login($userName:String!, $password:String!){\n        login(userName:$userName, password:$password){\n            ok\n            token\n            error\n        }\n    }\n": types.LoginDocument,
    "\n    mutation followUser($userName: String!) {\n        followUser(userName: $userName) {\n            ok\n            id\n            error\n        }\n    }\n": types.FollowUserDocument,
    "\n    mutation unfollowUser($userName: String!) {\n        unfollowUser(userName: $userName) {\n            ok\n            id\n            error\n        }\n    }\n": types.UnfollowUserDocument,
    "\n    query seeProfile($userName: String!) {\n        seeProfile(userName: $userName) {\n            \n            firstName\n            lastName\n            userName\n            bio\n            avatar\n            photos {\n                ...PhotoFragment\n            }\n            totalFollowing\n            totalFollowers\n            totalPhotos\n            isMe\n            isFollowing\n        }\n    }\n    \n  \n": types.SeeProfileDocument,
    "\n    mutation createAccount(\n    $firstName: String!, \n    $lastName:String,\n    $userName: String!,\n    $email: String!,\n    $password: String!){\n        createAccount(firstName: $firstName,\n        lastName: $lastName,\n        userName: $userName,\n        email: $email,\n        password: $password){\n            ok\n            error\n      }\n    }\n": types.CreateAccountDocument,
};

export function graphql(source: "\n    mutation deleteComment($deleteCommentId: Int!) {\n        deleteComment(id: $deleteCommentId) {\n          ok\n          id\n          error\n        }\n      }\n    "): (typeof documents)["\n    mutation deleteComment($deleteCommentId: Int!) {\n        deleteComment(id: $deleteCommentId) {\n          ok\n          id\n          error\n        }\n      }\n    "];
export function graphql(source: "\nmutation createComment($photoId: Int!, $payload: String!) {\n  createComment(photoId: $photoId, payload: $payload) {\n    ok\n    error\n    id\n  }\n}\n"): (typeof documents)["\nmutation createComment($photoId: Int!, $payload: String!) {\n  createComment(photoId: $photoId, payload: $payload) {\n    ok\n    error\n    id\n  }\n}\n"];
export function graphql(source: "\n                        fragment createComment on Comment {\n                            id\n                            payload\n                            isMine\n                            createAt\n                            user{\n                                userName\n                                avatar\n                            }\n                        }\n                    "): (typeof documents)["\n                        fragment createComment on Comment {\n                            id\n                            payload\n                            isMine\n                            createAt\n                            user{\n                                userName\n                                avatar\n                            }\n                        }\n                    "];
export function graphql(source: "\n        mutation toggleLike($id: Int!) {\n            toggleLike(id: $id) {\n              ok\n              error\n            }\n          }       \n        "): (typeof documents)["\n        mutation toggleLike($id: Int!) {\n            toggleLike(id: $id) {\n              ok\n              error\n            }\n          }       \n        "];
export function graphql(source: "\n  fragment PhotoFragment on Photo {\n    id\n    file\n    likes\n    commentCount\n    isLiked\n  }\n"): (typeof documents)["\n  fragment PhotoFragment on Photo {\n    id\n    file\n    likes\n    commentCount\n    isLiked\n  }\n"];
export function graphql(source: "\n  fragment CommentFragment on Comment {\n    id\n    payload\n    isMine\n    createAt\n    user {\n      userName\n      avatar\n    }\n  }\n"): (typeof documents)["\n  fragment CommentFragment on Comment {\n    id\n    payload\n    isMine\n    createAt\n    user {\n      userName\n      avatar\n    }\n  }\n"];
export function graphql(source: "\n  query me {\n    me {\n      userName\n      avatar\n      totalFollowing\n      totalFollowers\n    }\n  }\n"): (typeof documents)["\n  query me {\n    me {\n      userName\n      avatar\n      totalFollowing\n      totalFollowers\n    }\n  }\n"];
export function graphql(source: "\n  query SeeFeed {\n    seeFeed {\n      ...PhotoFragment\n      user {\n        userName\n        avatar\n      }\n      caption\n      commentCount\n      createAt\n      isMine\n      comments {\n        ...CommentFragment\n      }\n    }\n  }\n  \n  \n"): (typeof documents)["\n  query SeeFeed {\n    seeFeed {\n      ...PhotoFragment\n      user {\n        userName\n        avatar\n      }\n      caption\n      commentCount\n      createAt\n      isMine\n      comments {\n        ...CommentFragment\n      }\n    }\n  }\n  \n  \n"];
export function graphql(source: "\n    mutation login($userName:String!, $password:String!){\n        login(userName:$userName, password:$password){\n            ok\n            token\n            error\n        }\n    }\n"): (typeof documents)["\n    mutation login($userName:String!, $password:String!){\n        login(userName:$userName, password:$password){\n            ok\n            token\n            error\n        }\n    }\n"];
export function graphql(source: "\n    mutation followUser($userName: String!) {\n        followUser(userName: $userName) {\n            ok\n            id\n            error\n        }\n    }\n"): (typeof documents)["\n    mutation followUser($userName: String!) {\n        followUser(userName: $userName) {\n            ok\n            id\n            error\n        }\n    }\n"];
export function graphql(source: "\n    mutation unfollowUser($userName: String!) {\n        unfollowUser(userName: $userName) {\n            ok\n            id\n            error\n        }\n    }\n"): (typeof documents)["\n    mutation unfollowUser($userName: String!) {\n        unfollowUser(userName: $userName) {\n            ok\n            id\n            error\n        }\n    }\n"];
export function graphql(source: "\n    query seeProfile($userName: String!) {\n        seeProfile(userName: $userName) {\n            \n            firstName\n            lastName\n            userName\n            bio\n            avatar\n            photos {\n                ...PhotoFragment\n            }\n            totalFollowing\n            totalFollowers\n            totalPhotos\n            isMe\n            isFollowing\n        }\n    }\n    \n  \n"): (typeof documents)["\n    query seeProfile($userName: String!) {\n        seeProfile(userName: $userName) {\n            \n            firstName\n            lastName\n            userName\n            bio\n            avatar\n            photos {\n                ...PhotoFragment\n            }\n            totalFollowing\n            totalFollowers\n            totalPhotos\n            isMe\n            isFollowing\n        }\n    }\n    \n  \n"];
export function graphql(source: "\n    mutation createAccount(\n    $firstName: String!, \n    $lastName:String,\n    $userName: String!,\n    $email: String!,\n    $password: String!){\n        createAccount(firstName: $firstName,\n        lastName: $lastName,\n        userName: $userName,\n        email: $email,\n        password: $password){\n            ok\n            error\n      }\n    }\n"): (typeof documents)["\n    mutation createAccount(\n    $firstName: String!, \n    $lastName:String,\n    $userName: String!,\n    $email: String!,\n    $password: String!){\n        createAccount(firstName: $firstName,\n        lastName: $lastName,\n        userName: $userName,\n        email: $email,\n        password: $password){\n            ok\n            error\n      }\n    }\n"];

export function graphql(source: string): unknown;
export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;